using RecruitmentAPI.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ 1. Charger les param√®tres JWT
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var secret = jwtSettings["Key"];
if (string.IsNullOrEmpty(secret))
    throw new Exception("La cl√© secr√®te JWT est manquante dans appsettings.json."); // S√©curit√©

var key = Encoding.ASCII.GetBytes(secret);

// ‚úÖ 2. Ajouter les services
builder.Services.AddControllers();              // Active les contr√¥leurs
builder.Services.AddEndpointsApiExplorer();     // Swagger
builder.Services.AddSwaggerGen();               // UI Swagger

builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// ‚úÖ 3. Authentification JWT (d√©plac√©e ici AVANT builder.Build())
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,

        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(key)
    };
});

// ‚úÖ 4. Construire l'app
var app = builder.Build();

// ‚úÖ 5. Configurer le pipeline HTTP
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();                     // HTTP ‚ûú HTTPS
app.UseCors(options => options.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

app.UseAuthentication();                       // üîê Auth
app.Run();
